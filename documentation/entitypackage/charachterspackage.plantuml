@startuml

!theme plain
top to bottom direction
skinparam linetype ortho
skinparam class {
    BackgroundColor White
    ArrowColor Black
    BorderColor Black
}
interface PlatformDetection <<interface>> {
    + isOnPlatform(): boolean
}
    abstract class  Entity <<abstract>> {
      # frames: List<Integer>
      # velocityX: double
      # height: double
      # JUMP_STRENGTH: double
      # width: double
      # velocityY: double
      # isMoving: boolean
      # lastFrameTime: long
      # level: Level
      # currentFrame: int
      # facingRight: boolean
      # coordinate: Coordinate
      + getCoordinate(): Coordinate
      + move(double, double): void
      + getY(): double
      + getWidth(): double
      + getVelocityX(): double
      + getFrames(): List<Integer>
      + getHeight(): double
      # checkWallCollision(): void
      + setFrame(int): void
      # checkEntityCollision(): void
      + setVelocityY(double): void
      + getCurrentFrame(): int
      # handleEntityCollision(Entity): void
      + setCoordinate(Coordinate): void
      + setCurrentFrame(int): void
      + getVelocityY(): double
      + setY(double): void
      + getLevel(): Level
      + setFrames(List<Integer>): void
      # handlePacManEffect(): void
      # updateFrame(): void
      + getX(): double
      + stopFall(): void
      + update(): void
      + setHeight(double): void
      + isFacingRight(): boolean
      + getInfo(): List<String>
      # handleWallCollision(Wall): void
      + setWidth(double): void
      + setMoving(boolean): void
      + setX(double): void
      + setVelocityX(double): void
      + isDie(): boolean
    }
class Observable {
  + notifyObservers(): void
  + notifyObservers(Object): void
  + deleteObserver(Observer): void
  + deleteObservers(): void
  # setChanged(): void
  + addObserver(Observer): void
  + countObservers(): int
  # clearChanged(): void
  + hasChanged(): boolean
}

package characters {

    abstract class Enemy <<abstract>> {
        #caughtByBubble: boolean
        #speed: double
        #vulnerable: boolean
        # jumping: boolean
        #ableToFly: boolean
        #state: EnemyState
        #die: boolean
        #dieTime: long
        #vulnerableTime: long
        + Enemy(double, double, Level)
        + setJumping(boolean): void
        + update(): void
        + setCaughtByBubble(boolean): void
        + setDie(boolean): void
        + setIsFacingRight(boolean): void
        + isCaughtByBubble(): boolean
        + isVulnerable(): boolean
        + setVulnerable(boolean): void
        + setVulnerableTime(long): void
        + getInfo(): List<String>
        + isDie(): boolean
        + dieRoutine(): void
        #vulnerableRoutine(): void
        # moveTowardsPlayer(): void
        # moveAwayFromPlayer(): void
        # stop(): void
        # jump(): void
        # handleEntityCollision(Entity): void
        # handleWallCollision(Wall): void
        # {abstract}moveAI(): void
    }

    class Ghost {
        + Ghost(double, double, Level)
        + update(): void
        - fire(): void
        + jump(): void
        - init(): void
        + moveAI(): void
    }

    class Monster {
        + Monster(double, double, Level)
        + update(): void
        + handleWallCollision(Wall): void
        + handlePacManEffect(): void
        + moveAI(): void
        - init(): void
    }

    class Player {
        - Player(double, double, Level)
        - bubbleBlown: int
        - speed: double
        - firing: boolean
        - powerUpJumping: boolean
        - lives: int
        - jumpCount: int
        - powerUpMoving: boolean
        - jumping: boolean
        - blueGumCount: int
        - bubbleExploded: int
        - yellowGumCount: int
        - distance: double
        - powerUpPurpleGum: boolean
        - purpleGumCount: int
        - powerUpFire: boolean
        - state: PlayerState
        - killedEnemies: int
        - score: int
        + loseLife(): void
        + moveLeft(): void
        + reset(): void
        + getInstance(double, double, Level): Player
        + updateFrame(): void
        + update(): void
        + notifyAudio(Observer): void
        + jump(boolean): boolean
        + respawn(): void
        + fire(): boolean
        + addAudioObserver(Observer): void
        + moveRight(): void
        + stopMoving(): void
        + verticalJump(): boolean
        + handleWallCollision(Wall): void
        + handleEntityCollision(Entity): void
    }

    class ZenChan {
        + ZenChan(double, double, Level)
        + toString(): String
        + moveAI(): void
        + jump(): void
        - init(): void
    }

    interface Walker <<interface>> {
        + walkerJump(Enemy): void
        + walkerMove(Enemy): void
    }

    enum EnemyState {
        FACING_RIGHT,
        FACING_LEFT,
        VULNERABLE_RIGHT,
        VULNERABLE_LEFT,
        IS_IN_PRISON,
        DIE
        values(): PlayerState[]
        valueOf(String): PlayerState
    }

    enum PlayerState {
        IDLE_LEFT,
        IDLE_RIGHT,
        MOVING_LEFT,
        MOVING_RIGHT,
        JUMPING_LEFT,
        JUMPING_RIGHT,
        FIRING_LEFT,
        FIRING_RIGHT,
        DIE
        values(): PlayerState[]
        valueOf(String): PlayerState
    }
}
package bubble{

    class Bubble {
        -floating: boolean
        -floatingDelay: long
        -creationTime: long
        -liveTime: long
        -popping: boolean
        -poppingTime: long
        - state: BubbleState
        +Bubble(double, double, Level)
        + update(): void
        +update(): void
        +getInfo(): List<String>
        +setPopping(boolean): void
        +getState(): BubbleState
        +toString(): String
        +isFloating(): boolean
        #updateFrame(): void
        #handleWallCollision(Wall): void
        #handleEntityCollision(Entity): void
        -setFloating(boolean): void
        }
    enum BubbleState {
       CASTING,MOVING,POPPING,POPPED
        +values(): BubbleState[]
        +valueOf(String): BubbleState
    }
    class EnemyBubble{
    -state EnemyBubbleState
    -popped: boolean
    EnemyBubble(double, double, Level)
    +update(): void
    +setPopped(boolean): void
    +getInfo(): List<String>
    #updateFrame(): void
    #handleWallCollision(Wall): void
    #handleEntityCollision(Entity): void
    }
    enum EnemyBubbleState {
        FLYING, POPPED
        +values(): EnemyBubbleState[]
        +valueOf(String): EnemyBubbleState
    }

}

    Entity -right-|> Observable
    Enemy -up--|> Entity:<<extends>>
    Ghost --|> Enemy:<<extends>>
    Monster -up-|> Enemy:<<extends>>
    Player -up-|> Entity:<<extends>>
    ZenChan -l-|> Enemy:<<extends>>
    Walker <|.down. ZenChan:<<implements>>
    Walker <|.up. Ghost:<<implements>>
    Enemy "1"*-left- EnemyState:has
    Enemy +-left- EnemyState
    Player "1"*-right- PlayerState:has
    Player +-right- PlayerState
    PlatformDetection <|.. Player
    PlatformDetection <|.. Ghost
    PlatformDetection <|.. ZenChan
    Bubble -right--|> Entity:<<extends>>
    EnemyBubble ---|> Entity:<<extends>>
    Ghost ..> EnemyBubble:<<creates>>
    Player .left.> Bubble:<<creates>>
    EnemyBubbleState -down-* EnemyBubble:has
    BubbleState -down-* Bubble:has
    Player -[hidden]->Ghost
    Player -[hidden]left->Enemy
    ZenChan -[hidden]>Ghost
    EnemyBubbleState -down-+ EnemyBubble
    BubbleState -down-+ Bubble



}

@enduml