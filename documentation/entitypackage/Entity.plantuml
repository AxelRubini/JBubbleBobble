@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

    abstract class  Entity <<abstract>> {
      # frames: List<Integer>
      # velocityX: double
      # height: double
      # JUMP_STRENGTH: double
      # width: double
      # velocityY: double
      # isMoving: boolean
      # lastFrameTime: long
      # level: Level
      # currentFrame: int
      # facingRight: boolean
      # coordinate: Coordinate
      + getCoordinate(): Coordinate
      + move(double, double): void
      + getY(): double
      + getWidth(): double
      + getVelocityX(): double
      + getFrames(): List<Integer>
      + getHeight(): double
      # checkWallCollision(): void
      + setFrame(int): void
      # checkEntityCollision(): void
      + setVelocityY(double): void
      + getCurrentFrame(): int
      # handleEntityCollision(Entity): void
      + setCoordinate(Coordinate): void
      + setCurrentFrame(int): void
      + getVelocityY(): double
      + setY(double): void
      + getLevel(): Level
      + setFrames(List<Integer>): void
      # handlePacManEffect(): void
      # updateFrame(): void
      + getX(): double
      + stopFall(): void
      + update(): void
      + setHeight(double): void
      + isFacingRight(): boolean
      + getInfo(): List<String>
      # handleWallCollision(Wall): void
      + setWidth(double): void
      + setMoving(boolean): void
      + setX(double): void
      + setVelocityX(double): void
      + isDie(): boolean
    }
class Observable {
  + notifyObservers(): void
  + notifyObservers(Object): void
  + deleteObserver(Observer): void
  + deleteObservers(): void
  # setChanged(): void
  + addObserver(Observer): void
  + countObservers(): int
  # clearChanged(): void
  + hasChanged(): boolean
}

Entity --|> Observable

@enduml
